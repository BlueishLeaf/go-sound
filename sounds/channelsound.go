package sounds

import (
	"fmt"
	"time"
)

// A ChannelSound a sound of unknown length that is generated by a provided channel.
type ChannelSound struct {
	samples <-chan float64
	running bool
}

// WrapChannelAsSound takes an input sample channel and adapts it to be a Sound.
//
// For example, to play a sample channel:
//  output.Play(sounds.WrapChannelAsSound(..samples..))
func WrapChannelAsSound(samples <-chan float64) Sound {
	s := ChannelSound{
		samples,
		false,
	}

	return &s
}

func (s *ChannelSound) GetSamples() <-chan float64 {
	if !s.running {
		panic("Getting samples while a sound is not running")
	}
	return s.samples
}

func (s *ChannelSound) Length() uint64 {
	return MaxLength
}

func (s *ChannelSound) Duration() time.Duration {
	return MaxDuration
}

func (s *ChannelSound) Start() {
	s.running = true
}

func (s *ChannelSound) Running() bool {
	return s.running
}

func (s *ChannelSound) Stop() {
	s.running = false
}

func (s *ChannelSound) Reset() {
	// PICK: Support this by having a buffered version and replaying the buffer?
	panic("Can't reset a channel sound.")
}

func (s *ChannelSound) String() string {
	return fmt.Sprintf("Wrapped channel[%s]", s.samples)
}
